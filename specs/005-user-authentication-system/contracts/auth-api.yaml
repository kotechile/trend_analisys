openapi: 3.0.0
info:
  title: User Authentication API
  version: 1.0.0
  description: API for user authentication, registration, and management for the Trend Analysis Platform
servers:
  - url: /api/v1
    description: Local Development Server
  - url: https://api.trendanalysis.com/v1
    description: Production Server
tags:
  - name: Authentication
    description: User authentication and session management
  - name: User Management
    description: User registration and profile management
  - name: Admin
    description: Administrative user management functions
  - name: Password Reset
    description: Password reset functionality

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistrationResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '423':
          description: Account locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Invalidate user session and logout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get new access token using refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verify-email:
    post:
      tags:
        - Authentication
      summary: Verify email address
      description: Verify user email with verification token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailVerificationRequest'
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailVerificationResponse'
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/request-password-reset:
    post:
      tags:
        - Password Reset
      summary: Request password reset
      description: Send password reset email to user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetResponse'
        '404':
          description: Email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/reset-password:
    post:
      tags:
        - Password Reset
      summary: Reset password
      description: Reset user password with reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirmResponse'
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me:
    get:
      tags:
        - User Management
      summary: Get current user profile
      description: Get current authenticated user's profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - User Management
      summary: Update user profile
      description: Update current user's profile information
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me/change-password:
    post:
      tags:
        - User Management
      summary: Change password
      description: Change current user's password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePasswordResponse'
        '400':
          description: Invalid current password or new password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/users:
    get:
      tags:
        - Admin
      summary: List all users
      description: Get list of all users (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of users per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: role
          in: query
          description: Filter by user role
          schema:
            type: string
            enum: [user, admin]
        - name: is_active
          in: query
          description: Filter by active status
          schema:
            type: boolean
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/users/{user_id}:
    get:
      tags:
        - Admin
      summary: Get user by ID
      description: Get specific user information (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Admin
      summary: Update user
      description: Update user information (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUserUpdateRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Admin
      summary: Deactivate user
      description: Deactivate user account (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User deactivated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDeactivationResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRegistrationRequest:
      type: object
      required:
        - email
        - password
        - first_name
        - last_name
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: user@example.com
        password:
          type: string
          minLength: 8
          description: User's password (must meet strength requirements)
          example: SecurePass123!
        first_name:
          type: string
          minLength: 1
          maxLength: 50
          description: User's first name
          example: John
        last_name:
          type: string
          minLength: 1
          maxLength: 50
          description: User's last name
          example: Doe

    UserRegistrationResponse:
      type: object
      properties:
        message:
          type: string
          example: User registered successfully. Please check your email for verification.
        user:
          $ref: '#/components/schemas/UserProfile'

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: user@example.com
        password:
          type: string
          description: User's password
          example: SecurePass123!

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refresh_token:
          type: string
          description: Refresh token for getting new access tokens
          example: refresh_token_123456789
        token_type:
          type: string
          example: bearer
        expires_in:
          type: integer
          description: Token expiration time in seconds
          example: 3600
        user:
          $ref: '#/components/schemas/UserProfile'

    LogoutResponse:
      type: object
      properties:
        message:
          type: string
          example: Logout successful

    RefreshTokenRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          description: Refresh token
          example: refresh_token_123456789

    EmailVerificationRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: Email verification token
          example: verification_token_123456789

    EmailVerificationResponse:
      type: object
      properties:
        message:
          type: string
          example: Email verified successfully

    PasswordResetRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: user@example.com

    PasswordResetResponse:
      type: object
      properties:
        message:
          type: string
          example: Password reset email sent

    PasswordResetConfirmRequest:
      type: object
      required:
        - token
        - new_password
      properties:
        token:
          type: string
          description: Password reset token
          example: reset_token_123456789
        new_password:
          type: string
          minLength: 8
          description: New password (must meet strength requirements)
          example: NewSecurePass123!

    PasswordResetConfirmResponse:
      type: object
      properties:
        message:
          type: string
          example: Password reset successfully

    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User ID
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          description: User's email address
          example: user@example.com
        first_name:
          type: string
          description: User's first name
          example: John
        last_name:
          type: string
          description: User's last name
          example: Doe
        role:
          type: string
          enum: [user, admin]
          description: User's role
          example: user
        is_active:
          type: boolean
          description: Whether the user account is active
          example: true
        is_verified:
          type: boolean
          description: Whether the user's email is verified
          example: true
        last_login:
          type: string
          format: date-time
          description: Last login timestamp
          example: 2025-01-27T10:30:00Z
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
          example: 2025-01-27T09:00:00Z
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: 2025-01-27T10:30:00Z

    UserUpdateRequest:
      type: object
      properties:
        first_name:
          type: string
          minLength: 1
          maxLength: 50
          description: User's first name
          example: John
        last_name:
          type: string
          minLength: 1
          maxLength: 50
          description: User's last name
          example: Doe

    ChangePasswordRequest:
      type: object
      required:
        - current_password
        - new_password
      properties:
        current_password:
          type: string
          description: Current password
          example: CurrentPass123!
        new_password:
          type: string
          minLength: 8
          description: New password (must meet strength requirements)
          example: NewSecurePass123!

    ChangePasswordResponse:
      type: object
      properties:
        message:
          type: string
          example: Password changed successfully

    AdminUserUpdateRequest:
      type: object
      properties:
        first_name:
          type: string
          minLength: 1
          maxLength: 50
          description: User's first name
          example: John
        last_name:
          type: string
          minLength: 1
          maxLength: 50
          description: User's last name
          example: Doe
        role:
          type: string
          enum: [user, admin]
          description: User's role
          example: user
        is_active:
          type: boolean
          description: Whether the user account is active
          example: true

    UserListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserProfile'
        pagination:
          type: object
          properties:
            page:
              type: integer
              example: 1
            limit:
              type: integer
              example: 20
            total:
              type: integer
              example: 100
            pages:
              type: integer
              example: 5

    UserDeactivationResponse:
      type: object
      properties:
        message:
          type: string
          example: User deactivated successfully

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error code
          example: VALIDATION_ERROR
        message:
          type: string
          description: Error message
          example: Invalid request data
        details:
          type: object
          description: Additional error details
          example:
            field: "email"
            reason: "Invalid email format"
