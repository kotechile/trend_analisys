# =============================================================================
# Trend Analysis Platform - Backend Docker Compose
# =============================================================================
# This file defines the services for the Trend Analysis Platform backend
# including the API, database, Redis, and monitoring services.
# =============================================================================

version: '3.8'

services:
  # =============================================================================
  # BACKEND API SERVICE
  # =============================================================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: trend-analysis-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database configuration
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/trend_analysis
      - REDIS_URL=redis://redis:6379/0
      
      # Security configuration
      - SECRET_KEY=your-secret-key-change-in-production
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRATION_MINUTES=60
      - JWT_REFRESH_EXPIRATION_DAYS=7
      
      # Email configuration
      - SENDGRID_API_KEY=${SENDGRID_API_KEY:-}
      - FROM_EMAIL=noreply@trendanalysis.com
      - FROM_NAME=Trend Analysis Platform
      
      # External APIs
      - GOOGLE_TRENDS_API_KEY=${GOOGLE_TRENDS_API_KEY:-}
      - LINKUP_API_KEY=${LINKUP_API_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - AHREFS_API_KEY=${AHREFS_API_KEY:-}
      - SEMRUSH_API_KEY=${SEMRUSH_API_KEY:-}
      
      # Application configuration
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=http://localhost:3000,https://trendanalysis.com
      
      # Feature flags
      - USER_REGISTRATION=true
      - EMAIL_VERIFICATION=true
      - PASSWORD_RESET=true
      - MAINTENANCE_MODE=false
      
      # Security settings
      - ENABLE_RATE_LIMITING=true
      - ENABLE_SECURITY_HEADERS=true
      - ENABLE_REQUEST_LOGGING=true
      - ENABLE_METRICS_COLLECTION=true
      
      # Performance settings
      - DATABASE_POOL_SIZE=10
      - DATABASE_MAX_OVERFLOW=20
      - REDIS_MAX_CONNECTIONS=20
      - RATE_LIMIT_REQUESTS_PER_MINUTE=100
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./tmp:/app/tmp
    networks:
      - trend-analysis-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # POSTGRESQL DATABASE SERVICE
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: trend-analysis-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=trend_analysis
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - trend-analysis-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d trend_analysis"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # =============================================================================
  # REDIS CACHE SERVICE
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: trend-analysis-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - trend-analysis-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # =============================================================================
  # NGINX REVERSE PROXY (Optional)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: trend-analysis-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - trend-analysis-network
    profiles:
      - production

  # =============================================================================
  # MONITORING SERVICES (Optional)
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: trend-analysis-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - trend-analysis-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: trend-analysis-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - trend-analysis-network
    profiles:
      - monitoring

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  trend-analysis-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
